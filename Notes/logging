
# üß† LOGGING IN DJANGO ‚Äî Summary

## 1\. What Logging Is

Logging is like a **black box** in an airplane ‚Äî it records everything your app does, good or bad, so you can debug, monitor, and audit later.

In Django, logs record:

-   Errors (e.g. user not found)
-   Warnings
-   Info messages
-   Debug traces
* * *

## 2\. Django Logging System Overview

Django‚Äôs logging is based on Python‚Äôs built-in `logging` module and uses a **dictionary config** (`LOGGING = { ... }`) in `settings.py`.

**Main Components:**

| Component | Role | Analogy |
| --- | --- | --- |
| **Logger** | The entry point where messages come from | Microphone üé§ |
| **Handler** | Decides _where_ to send messages (file, console, etc.) | Speakers / Recorder üéß |
| **Formatter** | Defines _how_ logs look (layout) | Subtitle style üé¨ |
| **Filter** | Chooses which messages to allow | Security guard üö™ |

* * *

## 3\. Common Handlers

| Handler | Description |
| --- | --- |
| `logging.StreamHandler` | Sends logs to the terminal |
| `logging.FileHandler` | Writes logs to a file |
| `logging.NullHandler` | Discards logs (used to disable) |
| `logtail.LogtailHandler` | Sends logs to Better Stack |

* * *

## 4\. Minimal Example

```python
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,

    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "level": "DEBUG",
        },
        "file": {
            "class": "logging.FileHandler",
            "filename": "app.log",
            "level": "INFO",
        },
    },

    "loggers": {
        "": {  # Root logger
            "handlers": ["console", "file"],
            "level": "DEBUG",
        },
    },
}
```

Usage in views:

```python
import logging
logger = logging.getLogger(__name__)

def index(request):
    logger.info("User accessed index page")
    return HttpResponse("Hello")
```

* * *

## 5\. Logger Hierarchy

Django loggers follow module paths like:

```nginx
logging_test
logging_test.views
```

If a logger doesn‚Äôt find a handler, it ‚Äúbubbles up‚Äù (propagates) to its parent.

Setting `"propagate": False` stops this bubbling.

* * *

## 6\. Log Levels (from lowest to highest)

| Level | Purpose | Example |
| --- | --- | --- |
| `DEBUG` | Detailed info for devs | Variable states |
| `INFO` | General events | ‚ÄúUser logged in‚Äù |
| `WARNING` | Something odd, but not broken | ‚ÄúDisk almost full‚Äù |
| `ERROR` | Something failed | ‚ÄúDatabase connection lost‚Äù |
| `CRITICAL` | System unusable | ‚ÄúServer crash‚Äù |

* * *

# üåê LOGGING WITH BETTER STACK (LOGTAIL)

## 1\. What It Is

**Better Stack** (Logtail) is a cloud-based log management platform ‚Äî it stores, searches, and visualizes your logs in real-time.

Instead of writing logs to a file, you **send them to Better Stack servers** via the `logtail` handler.

* * *

## 2\. Install

`pip install logtail-python`

* * *

## 3\. Add to Django Settings

```python
from .env import env

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,

    "handlers": {
        "logtail": {
            "class": "logtail.LogtailHandler",
            "source_token": env("BETTERSTACK_SOURCE_TOKEN"),
            "host": "https://" + env("BETTERSTACK_INGESTING_HOST")
        },
        "console": {
            "class": "logging.StreamHandler",
            "level": "DEBUG",
        },
    },

    "loggers": {
        "": {
            "handlers": ["console", "logtail"],
            "level": "INFO",
        },
    },
}
```

`.env` file:

```env
BETTERSTACK_SOURCE_TOKEN="your_token_here"
BETTERSTACK_INGESTING_HOST="sXXXXXXX.eu-nbg-2.betterstackdata.com"
```

* * *

## 4\. Test it

In Django shell:

```python
import logging
logger = logging.getLogger("test")
logger.info("Hello from Django via Better Stack!")
```

Then check your **Better Stack dashboard ‚Üí Logs**.

* * *

## 5\. Why Logs Might Not Show Up

-   Wrong or outdated ingestion host (e.g. `ingest.betterstack.com` no longer works)
-   Network/DNS issues in WSL
-   Wrong token or missing `https://` in host
-   Django using a different settings file (check `DJANGO_SETTINGS_MODULE`)
* * *

## 6\. Recommended Setup

For **development**:

`"handlers": ["console", "file"]`

For **production**:

`"handlers": ["logtail", "file"]`

Keep both for redundancy.

* * *

## üéØ Summary Table

| Environment | Log Location | Example Handler |
| --- | --- | --- |
| Dev | Terminal + File | `StreamHandler`, `FileHandler` |
| Prod | Better Stack + File | `LogtailHandler`, `FileHandler` |

* * *

## üß© Analogy to Remember

Think of **Django logging** like a **news station**:

| Component | Analogy |
| --- | --- |
| Logger | Reporter collecting events |
| Handler | Broadcast channel (TV, radio, or cloud) |
| Formatter | The visual template (layout of the news) |
| Logtail | The cloud network broadcasting it worldwide üåç |


### Reference

[Logging in Django](https://youtu.be/XSwIUnGXrwY?si=PsFjx5xbbEGJ9pt2)